@page "/"
@using Radzen.Blazor
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory HttpClientFactory

﻿<nav class="navbar navbar-expand-md navbar-dark bg-dark mb-4">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Elderly Care Support</a>
        <button class="navbar-toggler @NavButtonCssClass" type="button" aria-controls="navbarCollapse"
                aria-label="Toggle navigation" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse @NavBarCssClass" id="navbarCollapse" @onclick="ToggleNavMenu">
            <ul class="navbar-nav me-auto mb-2 mb-md-0">
                <li class="nav-item">
                    <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                        <span class="oi oi-home" aria-hidden="true"></span> Home
                    </NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="counter" Match="NavLinkMatch.All">
                        <span class="oi oi-plus" aria-hidden="true"></span> About
                    </NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="fetchdata" Match="NavLinkMatch.All">
                        <span class="oi oi-list-rich" aria-hidden="true"></span> Services
                    </NavLink>
                </li>

                <li class="nav-item">
                    <NavLink class="nav-link" href="login" Match="NavLinkMatch.All">
                        <span class="oi oi-list-rich" aria-hidden="true"></span> Get Services
                    </NavLink>
                </li>
            </ul>
        </div>
    </div>
</nav>


<RadzenDataGrid AllowFiltering="true" 
                FilterPopupRenderMode="Radzen.PopupRenderMode.OnDemand" 
                FilterCaseSensitivity="Radzen.FilterCaseSensitivity.CaseInsensitive" 
                AllowPaging="true" 
                PageSize="10"
                AllowSorting="true" 
                Data="@apiResponse?.Result" 
                ColumnWidth="200px"
                SelectionMode="Radzen.DataGridSelectionMode.Single">

    <Columns>
        <RadzenDataGridColumn Property="FeeName" Title="Fee Name" />
        <RadzenDataGridColumn Property="FeeAmount" Title="Fee Amount" />
    </Columns>
</RadzenDataGrid>



@code {
    private ApiResponse? apiResponse;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var client = HttpClientFactory.CreateClient("API");
            var jsonResponse = await client.GetStringAsync("ElderlyCareHome");
            apiResponse = JsonSerializer.Deserialize<ApiResponse>(jsonResponse);
            foreach(var i in apiResponse.Result)
            {
                Console.Write(i);
            }
            Console.WriteLine(apiResponse.Result);// Get the response as a JSON string
        }
        catch (HttpRequestException ex)
        {
            var jsonResponse = $"Request error: {ex.Message}";
        }
    }


    private void OnClick()
    {
        // Handle button click
        Console.WriteLine("Button clicked!");
    }

    public class ApiResponse
    {
        [JsonPropertyName("result")]
        public List<Fee> Result { get; set; } = new List<Fee>();
        public int Id { get; set; }
        public object Exception { get; set; }
        public int Status { get; set; }
        public bool IsCanceled { get; set; }
        public bool IsCompleted { get; set; }
        public bool IsCompletedSuccessfully { get; set; }
        public int CreationOptions { get; set; }
        public object AsyncState { get; set; }
        public bool IsFaulted { get; set; }
    }

    public class Fee
    {
        [JsonPropertyName("feeId")]
        public int FeeId { get; set; }

        [JsonPropertyName("feeName")]
        public string FeeName { get; set; }

        [JsonPropertyName("feeAmount")]
        public decimal FeeAmount { get; set; }
    }
}

        @code {
    private bool collapseNavMenu = true;
    private string? NavBarCssClass => collapseNavMenu ? null : "show";
    private string? NavButtonCssClass => collapseNavMenu ? "collapsed" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }


}